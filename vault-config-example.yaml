settings:
  # URL of Vault instance
  url: "http:/127.0.0.1:8200"
  username: "admin"
  password: "password"
  token: ""
  key_shares: 5
  threshold: 3
  instance_name: "vault"
  namespace: "vault"

# Allows creating policies in Vault which can be used later on in roles
# for the Kubernetes based authentication.
# See https://www.vaultproject.io/docs/concepts/policies.html for more information.
policies:
  - name: allow_secrets
    rules: |
      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
  - name: admin
    rules: |
      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
  - name: viewer
    rules: |
      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
      path "test/*" {
        capabilities = ["create", "read", "list"]
      }
# The auth block allows configuring Auth Methods in Vault.
# See https://www.vaultproject.io/docs/auth/index.html for more information.
auth:
  - type: kubernetes
    # If you want to configure with specific kubernets service account instead of default service account
    # https://www.vaultproject.io/docs/auth/kubernetes.html
    config:
      # token_reviewer_jwt: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9....
      # kubernetes_ca_cert: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----
      kubernetes_host: https://192.168.64.42:8443
    # Allows creating roles in Vault which can be used later on for the Kubernetes based
    # authentication.
    #  See https://www.vaultproject.io/docs/auth/kubernetes.html#creating-a-role for
    # more information.
    roles:
      # Allow every pod in the default namespace to use the secret kv store
      - name: default
        bound_service_account_names: default
        bound_service_account_namespaces: default
        policies: allow_secrets
        ttl: 1h

  # Allows configuring roles for Vault's token based authentication.
  # See https://www.vaultproject.io/docs/auth/token.html for
  # more information.
  - type: token
    roles:
      - name: prometheus-metrics
        allowed_policies:
          - prometheus-metrics
        disallowed_policies:
          - Administrator
          - DeveloperFullAccess
        orphan: true

  # The userpass auth method allows authentication against Vault using Vault username/password credentials.
  # See https://www.vaultproject.io/docs/auth/userpass.html for more information.
  - type: userpass
    users:
      - username: admin
        password: admin
        token_policies: allow_secrets

# Allows configuring Secrets Engines in Vault (KV, Database and SSH is tested,
# but the config is free form so probably more is supported).
# See https://www.vaultproject.io/docs/secrets/index.html for more information.
secrets:
  # This plugin stores arbitrary secrets within the configured physical storage for Vault.
  # See https://www.vaultproject.io/docs/secrets/kv/index.html for
  # more information.
  - path: secret
    type: kv
    description: General secrets.
    options:
      version: 2

  # Mounts kv with extra configuration
  - path: leaderelection
    type: kv
    description: kv secret engine used for leader election logic
    options:
      version: 2
    configuration:
      config:
        - cas_required: true
          max_versions: 1

  # Mounts non-default plugin's path
  - path: ethereum-gateway
    type: plugin
    plugin_name: ethereum-plugin
    description: Immutability's Ethereum Wallet

  # This plugin stores database credentials dynamically based on configured roles for
  # the MySQL database.
  # See https://www.vaultproject.io/docs/secrets/databases/mysql-maria.html for
  # more information.
  - type: database
    description: MySQL Database secret engine.
    configuration:
      config:
        - name: my-mysql
          plugin_name: "mysql-database-plugin"
          connection_url: "{{username}}:{{password}}@tcp(127.0.0.1:3306)/"
          allowed_roles: [pipeline]
          username: ${env "ROOT_USERNAME"} # Example how to read environment variables
          password: ${env "ROOT_PASSWORD"}
          rotate: true # Ask bank-vaults to ask Vault to rotate the root credentials
      roles:
        - name: pipeline
          db_name: my-mysql
          creation_statements: "GRANT ALL ON *.* TO '{{name}}'@'%' IDENTIFIED BY '{{password}}';"
          default_ttl: "10m"
          max_ttl: "24h"

  # Create a named Vault role for signing SSH client keys.
  # See https://www.vaultproject.io/docs/secrets/ssh/signed-ssh-certificates.html#client-key-signing for
  # more information.
  - type: ssh
    path: ssh-client-signer
    description: SSH Client Key Signing.
    configuration:
      config:
        - name: ca
          generate_signing_key: "true"
      roles:
        - name: my-role
          allow_user_certificates: "true"
          allowed_users: "*"
          key_type: "ca"
          default_user: "ubuntu"
          ttl: "24h"

  # The PKI secrets engine generates X.509 certificates
  # See https://www.vaultproject.io/docs/secrets/pki/index.html for more information
  - type: pki
    description: Vault PKI Backend
    config:
      default_lease_ttl: 168h
      max_lease_ttl: 720h
    configuration:
      config:
        - name: urls
          issuing_certificates: https://vault.default:8200/v1/pki/ca
          crl_distribution_points: https://vault.default:8200/v1/pki/crl
      root/generate:
        - name: exported
          common_name: vault.vault
          create_only: true
          save_to: "secret/data/pki/ca" # save private_key to a kv version 2 location
      roles:
        - name: default
          allowed_domains: localhost,pod,svc,default
          allow_subdomains: true
          generate_lease: true
          ttl: 30m

  # The AWS secrets engine generates AWS access credentials dynamically based on IAM policies.
  # See https://www.vaultproject.io/docs/secrets/aws/index.html for more information
  - type: aws
    description: AWS secret engine.
    configuration:
      config/root:
        - access_key: ${env "AWS_ACCESS_KEY_ID"} # or you can put the credential literals directly here
          secret_key: ${env "AWS_SECRET_ACCESS_KEY"}
          # Uncomment for root credential rotation
          # see: https://www.vaultproject.io/api/secret/aws/index.html#rotate-root-iam-credentials
          # rotate: true
      roles:
        - name: simple-user
          credential_type: iam_user
          policy_arns:
            - arn:aws:iam::123456789012:policy/UsersManageOwnCredentials

  # The Google Cloud Vault secrets engine dynamically generates Google Cloud service account keys and
  # OAuth tokens based on IAM policies.
  # See https://www.vaultproject.io/docs/secrets/gcp/index.html for more information
  - type: gcp
    config:
      credentials: ${env `VAULT_GCP_SA_CREDENTIALS`}
    description: GCP secret engine.
    configuration:
      roleset:
        - name: kubernetes-engine-admin
          secret_type: access_token
          project: my-project
          token_scopes: https://www.googleapis.com/auth/cloud-platform
          bindings: |
            resource "//cloudresourcemanager.googleapis.com/projects/my-project" {
              roles = [ "roles/container.admin" ]
            }

# Registers a new plugin in Vault's plugin catalog. "plugin_directory" setting should be set it Vault server configuration
# and plugin binary should be present in plugin directory. Also, for some plugins readOnlyRootFilesystem Pod Security Policy
# should be disabled to allow RPC communication between plugin and Vault server via Unix socket
# See https://www.vaultproject.io/api/system/plugins-catalog.html and
#     https://github.com/hashicorp/go-plugin/blob/master/docs/internals.md for details.
plugins:
  - plugin_name: ethereum-plugin
    command: ethereum-vault-plugin --ca-cert=/vault/tls/client/ca.crt --client-cert=/vault/tls/server/server.crt --client-key=/vault/tls/server/server.key
    sha256: 62fb461a8743f2a0af31d998074b58bb1a589ec1d28da3a2a5e8e5820d2c6e0a
    type: secret

# Allows configuring Audit Devices in Vault (File, Syslog, Socket).
# See https://www.vaultproject.io/docs/audit/ for more information.
audit:
  - type: file
    description: "File based audit logging device"
    options:
      file_path: /tmp/vault.log

# Allows writing some secrets to Vault (useful for development purposes).
# See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
startupSecrets:
  - type: kv
    path: secret/data/accounts/aws
    data:
      data:
        AWS_ACCESS_KEY_ID: secretId
        AWS_SECRET_ACCESS_KEY: s3cr3t

groups:
  - name: admin
    policies:
      - allow_secrets
    metadata:
      privileged: true
    type: external

group-aliases:
  - name: admin
    mountpath: kubernetes
    group: admin
