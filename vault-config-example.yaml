setting:
  # URL of Vault instance
  url: "http://127.0.0.1:8200"
  username: "admin"
  password: "password"
  token: "hvs.9XnKjWxU2LgSXkFWCeFXj7kS"
  key_shares: 5
  threshold: 3
  instance_name: "vault"
  namespace: "vault"
  base_path: "/"

# Allows creating policies in Vault which can be used later on in roles
# for the Kubernetes based authentication.
# See https://www.vaultproject.io/docs/concepts/policies.html for more information.
policies:
  - name: admin
    rules: |
      # Admin Policy for HashiCorp Vault
      # Grants comprehensive permissions for most Vault operations.
      path "sys/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      path "auth/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      path "identity/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      path "sys/policies/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      path "sys/control-group/authorize" {
        capabilities = ["update"]
      }

      path "sys/control-group/lookup" {
        capabilities = ["read"]
      }

      path "sys/leases/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }

      path "sys/health" {
        capabilities = ["read"]
      }

      # Enable full access to Transit secrets engine
      path "transit/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }

      # Enable full access to KV secrets engine
      path "kv/*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }
  - name: viewer
    rules: |
      path "secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
      path "test/*" {
        capabilities = ["create", "read", "list"]
      }
# The auth block allows configuring Auth Methods in Vault.
# See https://www.vaultproject.io/docs/auth/index.html for more information.
auth:
  - type: kubernetes
    path: kubernetes/
    method_config:
      # token_reviewer_jwt: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9....
      # kubernetes_ca_cert: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----
      kubernetes_host: https://192.168.64.42:8443
      # Allows creating roles in Vault which can be used later on for the Kubernetes based
      # authentication.
      #  See https://www.vaultproject.io/docs/auth/kubernetes.html#creating-a-role for
      # more information.
      roles:
        # Allow every pod in the default namespace to use the secret kv store
        - name: default
          audience: vault
          bound_service_account_names:
            - default
          bound_service_account_namespaces:
            - default
          policies:
            - allow_secrets
            - default
          ttl: 1h
        - name: test_1
          audience: vault
          bound_service_account_names:
            - default
            - new_test
          bound_service_account_namespaces:
            - default
          policies:
            - allow_secrets
          ttl: 1h
        - name: hihi_test
          audience: vault
          bound_service_account_names:
            - default
          bound_service_account_namespaces:
            - default
          policies:
            - default
          ttl: 1h

  # Allows configuring roles for Vault's token based authentication.
  # See https://www.vaultproject.io/docs/auth/token.html for
  # more information.
  # NOTE: Can not disable authentication token, this is enable by default
  - type: token
    path: token/
    # method_config:
    #   roles:
    #     - name: prometheus-metrics
    #       allowed_policies:
    #         - prometheus-metrics
    #       disallowed_policies:
    #         - Administrator
    #         - DeveloperFullAccess
    #       orphan: true

  # The userpass auth method allows authentication against Vault using Vault username/password credentials.
  # See https://www.vaultproject.io/docs/auth/userpass.html for more information.
  - type: userpass
    path: userpass/
    method_config:
      users:
        - username: admin
          password: password
          token_policies:
            - default
            - admin
        - username: viewer
          password: password
          token_policies:
            - default
            - viewer

# # Allows configuring Secrets Engines in Vault (KV, Database and SSH is tested,
# # but the config is free form so probably more is supported).
# # See https://www.vaultproject.io/docs/secrets/index.html for more information.

# NOTE: CLI Tools only support kv-v2 storage engines in this time.
secret_engines:
  # This plugin stores arbitrary secrets within the configured physical storage for Vault.
  # See https://www.vaultproject.io/docs/secrets/kv/index.html for
  # more information.
  - path: secret/
    type: kv
    description: General secrets.

  # Mounts kv with extra configuration
  - path: leaderelection/
    type: kv
    description: kv secret engine used for leader election logic
# Allows writing some secrets to Vault (useful for development purposes).
# See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
# startupSecrets:
#   - type: kv
#     path: secret/data/accounts/aws
#     data:
#       data:
#         AWS_ACCESS_KEY_ID: secretId
#         AWS_SECRET_ACCESS_KEY: s3cr3t
#

